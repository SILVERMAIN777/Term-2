<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>

<body>
<h1 align="center">Лабораторная работа №1</h1>
<h2>Тема: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Исследование временных характеристик алгоритмов.</h2>
<h2>Цель работы: Развитие умений и навыков теоретической и практической оценки 
  временных характеристик алгоритмов.<br></h2>
<h3 align="center">Общие положения</h3>
<p>Теоретически временные характеристики алгоритмов оцениваются с помощью асимптотических 
  функций. Таковыми являются функции Ө, O, <img src="img/Om.GIF" width="21" height="16">. 
  Если временную оценку зависимости времени выполнения алгоритма от объема входных 
  данных обозначить через T(n), то асимптотические функции определяются следующим 
  образом.</p>
<p>T(n)= Ө( g(n)), если найдутся такие две константы с<sub>1</sub> и с<sub>2</sub> и такое n<sub>0</sub>, что для 
  всех выполняется неравенство</p>
<p> <img src="img/13Lab_Ris1.GIF" width="201" height="31">.<br>
  T(n)= O( g(n)), если найдутся такие с и такое n<sub>0</sub>, что для всех <img src="img/13Lab_Ris2.GIF" width="56" height="24">выполняется 
  неравенство</p>
<p><img src="img/13Lab_Ris3.GIF" width="174" height="26"></p>
<p>Теоретические оценки временных характеристик для алгоритмов с циклами получаются 
  путем приписывания каждой строке программы веса (количества команд) и количество 
  исполнений данного веса. Общее время исполнения алгоритма состоит из суммы всех 
  произведений весов на количество повторений. Для рекурсивных алгоритмов временные 
  оценки получаются в виде рекуррентных отношений</p>
<p> <img src="img/13Lab_Ris4.GIF" width="290" height="22"></p>
<p>где а – количество подзадач, на которые разбивается рекурсивно решаемая задача 
  на каждом шаге;</p>
<p>n/b – объем входных данных для каждой подзадачи;</p>
<p>D(n) – время разбиения задачи на подзадачи;</p>
<p>c(n) – время соединения решений всех подзадач для получения решения задачи.</p>
<p>Типичные асимптотические характеристики, которые получаются при анализе алгоритмов 
  выражаются функциями n, n<sup>2</sup>, n*log n, log n, 2<sup>n</sup>, где log b=log<sub>2</sub>b.</p>
<p>Асимптотические характеристики оценки времени исполнения алгоритма верны для 
  больших n (объем входных данных ). Для маленьких n время выполнения алгоритма 
  может оказаться меньшим у алгоритма с худшей характеристикой. Например, если 
  один алгоритм имеет характеристику T(n)=Ө(n<sup>2</sup>) , а другой T(n)= Ө( 
  n*log n), то асимптотически второй алгоритм предпочтительнее первого. Однако 
  для относительно небольших значений n первый алгоритм затратит времени на свое 
  выполнение больше второго. </p>
<p>С практической точки зрения важна оценка с коэффициентом. Приближенные значения 
  коэффициентов можно получить, имея время выполнения алгоритма для разных n. 
  Зная быстродействие машины, на которой исполняется алгоритм, асимптотическую 
  характеристику алгоритма и объем входных данных можно определить среднее значение 
  коэффициентов. Зная значения коэффициентов и асимптотическую функцию можно более 
  точно прогнозировать применение определенного алгоритма для данных заданного 
  объема.<br>
</p>
<h3 align="center">Выполнение работы</h3>
<ol>
  <li> Для заданных описаний задачи составить указанные алгоритмы ее решения.</li>
  <li>Найти асимптотические оценки составленных алгоритмов.</li>
  <li>По разработанным алгоритмам составить программы.</li>
  <li>Для различных объемов входных данных получить время выполнения программы 
    (для языка С функция – clock, время засекается до начала работы алгоритма 
    и после окончания работы).</li>
  <li>По полученным временам определить коэффициенты используя формулу<br>
    <img src="img/13Lab_Ris5.GIF" width="122" height="43">,<br>
    где T(n) – время выполнения, <br>
    a – искомый коэффициент,<br>
    b – быстродействие ЭВМ (10<sup>6</sup>),<br>
    g(n) – функция для асимптотической оценки,</li>
  <li>Сравнить различные алгоритмы решения одной и той же задачи между собой и 
    дать рекомендации, для какого объема входных данных какой алгоритм использовать<br>
  </li>
</ol>
<h3 align="center">Отчет</h3>
<p>В качестве отчета представляются алгоритмы, написанные на псевдокоде, их алгоритмические 
  оценки и методики их получения.</p>
<p>Предъявляются разработанные программы и времена их выполнения для различных 
  объемов входных данных, а также расчеты коэффициентов для асимптотических характеристик.</p>
<p>Формулируются рекомендации: какой алгоритм для какого объема данных рационально 
  применять.</p>
<p>Отчет может быть выполнен в рукописном, печатном или электронном виде.<br>
</p>
<h3 align="center">Варианты заданий.</h3>
<p>Вариант 1.</p>
<p>Алгоритм линейного поиска. Вход: последовательность n чисел A=&lt;a<sub>1</sub>,…,a<sub>n</sub>&gt; 
  и число v. Выход: индекс i, для которого v=A[i] или NIL, если v не принадлежит 
  А.</p>
<p>Использовать последовательный просмотр при поиске v. Оценить сколько сравнений 
  потребуется алгоритму, если искомым может быть любой элемент массива А (с одинаковой 
  вероятностью). Каково время работы в среднем и в худшем случае? Выразить это 
  время Ө-обозначением. При поиске в отсортированном массиве можно сначала сравнивать 
  искомый элемент со средним элементом массива и, узнав в какой из полученных 
  частей массива находится искомый, продолжить поиск рекурсивно (двоичный поиск). 
</p>
<p>Написать программу двоичного поиска, учтя время на сортировку, с рекурсией. 
  Определить её Ө.</p>
<p>Сравнить временные характеристики алгоритмов: </p>
<li>линейного поиска,</li><br>
<li>сортировки с двоичным поиском,представленными циклами,</li><br>
<li>сортировки с двоичным поиском,представленными рекурсией.</li><br></p> 
<p>Вариант 2.</p>
<p>Даны коэффициенты а<sub>0</sub>,а<sub>1</sub>,…,а<sub>n-1</sub> многочлена</p>
<p><img src="img/13Lab_Ris6.GIF" width="122" height="50"></p>
<p>Построить алгоритм, требующий времени Ө(n<sup>2</sup>) для вычисления значения М(х) в 
  точке х<sub>0</sub> (заданной).</p>
<p>Построить алгоритм выполнения этих же вычислений за время Ө(n) без использования 
  дополнительной памяти (использовать схему Горнера).</p>
<p><img src="img/13Lab_Ris7.GIF" width="345" height="51"><br>
  Сравнить временные характеристики двух составленных алгоритмов. </p>
<p>Вариант 3.</p>
<p>Цикл While процедуры “Сортировка вставками просматривает элементы отсортированного 
  участка А[1…j-1] подряд. </p>
<p>Вместо последовательного просмотра использовать двоичный поиск. Определить 
  Ө для двоичного поиска.Удастся ли таким образом сделать общее время сортировки 
  Ө(n log n)?</p>
<p>Двоичный поиск: сравнить искомый элемент с искомым элементом массива и определить 
  в какой половине массива он находится, а затем применить эту процедуру последовательно 
  к получающимся половинам. Программа может быть реализована циклом или рекурсией.</p>
<p>Сравнить временные характеристики трёх алгоритмов: вставками, вставками с двоичным 
  поиском и рекурсией, с двоичным поиском циклами.<br>
</p>
<p>Вариант 4</p>
<p>Асимптотически сортировка слиянием быстрее сортировки вставками, но для малых 
  объемов данных соотношение обратное. Поэтому имеет смысл короткие куски сортировать 
  вставками. Где провести границу?<br>
  Выберите практически оптимальное значение к, если исходный массив разбит на 
  к частей.</p>
<p>Ответьте на следующие вопросы:
<li></li>
Пусть массив размера n разбит на к частей размера n/к. Покажите, что можно отсортировать 
вставками все части по отдельности за время Ө(nк) ;<br>
<li></li> 
после этого можно слить все части в один упорядоченный массив за время Ө( n*log( 
n/к));<br>
<li></li>
покажите, что общее время работы такого алгоритма Ө((n*к+n*log(n/к)).<br></p> 
<p>Вариант 5</p>
<p>Пусть А [1…n] массив из n различных чисел. Количество инверсий, т.е. число 
  пар(i,j) i&lt;j, для которых А[i]&gt;A[j]. Постройте алгоритм для нахождения 
  количества инверсий последовательным просмотром. Используйте для построения 
  алгоритма нахождения числа инверсий алгоритм сортировки вставками. Оцените время 
  работы обоих алгоритмов и постройте алгоритм с временной характеристикой <br>
  Ө( n*log n) (модификацией алгоритма сортировки слиянием).</p>
<p>Ответьте на вопросы:
<li></li>укажите пять инверсий в &lt;2,3,8,6,1&gt;.<br>
<li></li>каково максимально возможное число инверсий в массиве длины n. <br></p> 
<p>Вариант 6</p>
<p>Оформить сортировку вставками как рекурсивную процедуру: желая сортировать 
  A[1..n], мы (рекурсивно) сортируем A[1..n-1], а затем ставим A[n] на правильное 
  место в отсортированном массиве A[1..n-1].<br>
  Написать рекуррентные отношения для времени работы такой процедуры и найти оценку 
  O(g(n))=T(n).</p>
<p>Сравнить эту оценку с начальной сортировкой вставками и слиянием.<br>
</p>
<p>&nbsp;</p>

&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A HREF="Лекция №3.htm">Вернуться на лекцию</A><P>

<P><br>
<font color="#481493" size="3" face="arial">
&copy, 2004, ХНУРЭ, каф. ПОЭВМ, Дюбко Г. Ф., все вопросы направлять по адресу: Valenda@ukr.net</font></p>
<p>&nbsp;</p>
</body>
</html>
