<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<title>Untitled Document</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>

<body>
<h2 align="center">Лекция №2 </h2>
<h2 align="center">Понятие алгоритма и его роль в разработке программы.</h2>
<p>Чтобы решить какую либо задачу на ЭВМ ее необходимо представить в виде программы, 
  записанной на некотором языке. Процесс разработки программы включает в себя 
  несколько этапов, и представление программы в некотором языке – один из последних 
  этапов разработки.</p>
<p>Схема процесса разработки программы представлена на рис. 1.<br>
</p>
<p align="center"><img src="img/2vRis1.GIF" width="585" height="476"></p>
<p align="center">Рис.1. Этапы разработки программы.</p>
<p>Следует отметить, что схема используется в процедурном стиле программирования, 
  где основой для разработки является алгоритм. Прохождение по этапам сверху в 
  низ, ввиду возможности ошибок на каждом этапе, предполагает многократное прохождение 
  этапов при выявлении ошибок. При этом ошибки на начальных этапах, обходятся 
  гораздо дороже, чем на последующих.</p>
<p>Под алгоритмом понимают общее правило для решения класса задач, удовлетворяющее 
  следующим условиям:<br>
<li> процесс последовательной обработки данных, идущий в дискретном времени последовательными 
  шагами, определяет конечную систему данных, полученную переработкой исходной 
  системы данных для этого шага (дискретность алгоритма);</li>
<br>
<li> система данных, получаемых в какой-либо момент времени, однозначно определяется 
  системой данных в предшествующие моменты (детерминированность);</li>
<br>
<li> правила получения последующих данных из предыдущих должны быть простыми и 
  локальными (т.е. касаться только этого шага, элементарность шагов алгоритма);</li>
<br>
<li> если способ получения последующих данных из предыдущих не дает результата, 
  то должно быть указано, что считать результатом (направленность алгоритма);</li>
<li>начальная система данных может выбираться из некоторого потенциального бесконечного 
  множества (массовость).<br></p>
  </li>
<p>Рассмотрим примеры, иллюстрирующие понятие алгоритма.</p>
<p>Пример 1. Нахождение наибольшего общего делителя двух натуральных чисел НОД 
  (x,y).</p>
<p>Известен алгоритм Эвклида нахождения НОД. Он определяется правилом: “Из двух 
  заданных чисел выбирается большее(Х) и находится r=x-y. При этом x и y составляют 
  систему исходных данных описанного шага. Результатом этого шага является пара 
  r и min(x,y), которые есть исходными для следующего исполнения этого шага. Вычисления 
  продолжаются до тех пор, пока r не будет равно min(x,y).”</p>
<p>Таким образом, в алгоритме Эвклида использован только один элементарный шаг, 
  состоявший в нахождении r и min(x,y). Кроме того, выполняются требования дискретной, 
  детерминированной, направленности (результат получается всегда), массовости. 
</p>
<p>Здесь ниже приведен процесс выполнения алгоритма при нахождении НОД (12, 4):</p>
<pre>
   x  y  r
   12 4  8
   8  4  4
   4  4  НОД (12, 4)=4.
  </pre>
<p>Пример 2. Деление чисел в “столбик”</p>
<p>Правила выполнении этой операции известны. Они состоят в том чтобы в делимом 
  выделить слева на право цифры, составляющие минимальное число, которое делится 
  на делитель, далее производятся известные манипуляции с умножением, вычитанием, 
  получением разности и приписывания к разности текущего разряда делимого. Это 
  есть элементарный шаг алгоритма. Рассмотрим конкретные применения этого правила. 
  <br>
</p>
<p align="center"><img src="img/2vRis2.GIF" width="312" height="180"></p>
<p align="center">Рис.2.Деление чисел в столбик.</p>
<p>а.) На рис.а. результат получается после двукратного выполнения элементарного 
  шага.</p>
<p>б.) На рис.б. процесс не заканчивается, т.к. в десятичной части результата 
  получается 3, приводящее к разности 10. Следовательно нарушено свойство направленности 
  и такой процесс не может считаться алгоритмом. Однако можно удовлетворить требованию 
  направленности, задав вычисления с точностью до указанного знака.</p>
<p>в.) 196:0 – результат не определен, следовательно опять же нарушено требование 
  направленности. Чтобы вышеописанный процесс был алгоритмом нужно либо исключить 
  0 из множества чисел делителей, либо определить значение частного для (х, 0) 
  произвольным образом.</p>
<p>Если следовать указанным дополнениям, то процес деления в “столбик” является 
  алгоритмом.</p>
<p>Рассмотрим теперь характеристики алгоритма, которые в дальнейшем окажутся необходимыми.</p>
<p>Схематически алгоритм можно представить как:</p>
<p align="center"><img src="img/2vRis3.GIF" width="365" height="65"></p>
<p>Исходные данные характеризуются обьектом, целым числом “n”, обозначающим число 
  битов, необходимых для представления исходных данных.</p>
<p>Рассматриваются такие характеристики алгоритма:
<li> существование алгоритма;</li>
<br>
  
<li> возможность реализации алгоритма на ЭВМ;</li>
<br>
  
<li> время необходимое для реализации алгоритма;</li>
<br>
  
<li> память, необходимая для реализации алгоритма;</li>
<br>
  
<li> язык представления алгоритма;</li>
<p>Известные математики 19 и начала 20 века считали, что любая задача может быть 
  решена с помощью алгоритма. Однако известный математик Гегель в начале 20 века 
  доказал существование задачи, которая не может быть решена алгоритмически. К 
  настоящему времени известен ряд конкретных задач, не имеющих алгоритмического 
  решения. Среди них задача об останове машины. Формируется она следующим образом.</p>
<p>Существует множество программ (П) и множество исходных данных (Д). Программист 
  запускает на ЭВМ (П) с множеством их исходных данных (Д) и ожидает останова 
  ЭВМ для прочтения результата. Однако ЭВМ длительное время работает не останавливаясь. 
  Возникает вопрос, остановится ли она вообще? Возникает желание остановить алгоритм 
  А, исходными данными которого являются П и Д. Алгоритм А должен дать ответ остановится 
  ли программа П с данными Д. Доказано что для П и любых Д такого алгоритма не 
  существует.</p>
<p>При составлении алгоритма для решения заданной задачи необходимо проверять, 
  не относится ли задача к классу алгоритмически неразрешимых. </p>
<p>Если алгоритм существует, то это еще не значит, что он может быть реализован 
  на ЭВМ в приемлемое для пользователя время с реализуемым расходом памяти. Существует 
  целый ряд задач, имеющих алгоритм для своего решения, но практически не решаемых 
  из-за большого количества операций, которые должна выполнить ЭВМ. Для выполнения 
  такого количества операций могут потребоваться сотни лет. Анализ алгоритма на 
  реализуемость производится с помощью таких характеристик как временная и емкостная 
  сложность алгоритма. </p>
<p>Языки представления алгоритмов будут рассмотрены в следующей лекции. Здесь 
  заметим, что они служат для записи операций выполняемых в алгоритме и указания 
  последовательности операций. При разработке алгоритмов в начале разработки какой-либо 
  шаг алгоритма может выражаться, в свою очередь, алгоритмом, который будет расшифрован 
  на дальнейших построениях алгоритма. Такой шаг изображается в виде геометрической 
  фигуры – блока (ромб, прямоугольник, овал) и стрелок указывающих порядок выполнения 
  шагов. Порядок передачи инструкций, управляющих управлением алгоритма, называется 
  алгоритмом. Различают алгоритмы с жестким управлением и алгоритмы, управляемые 
  событиями. Рассмотрим эти два типа управления на примере.</p>
<p>Пусть имеется автоматизированная система выдачи авиабилетов, управляемая алгоритмом:</p>
<p align="center"><img src="img/2vRis4.GIF" width="251" height="466"><br>
</p>
<p>Здесь “ввод данных 1” обозначает информацию о пассажире, “ввод данных 2” – 
  информацию о рейсе, “ввод данных 3” – уплаченная сумма, “вывод отчета” – выдача 
  авиабилетов. Чтобы оформить один авиабилет необходимо пройти весь алгоритм от 
  начала до конца. Предположим, что необходимо оформить авиабилеты на семью, каждый 
  член которой имеет одну и туже фамилию, проживает по одному и тому же адресу, 
  летит одним и тем же рейсом. Используя этот алгоритм, оператор должен каждый 
  раз пройти алгоритм от входа до выхода, чтобы выдать билет одному члену семьи. 
  Это типичный алгоритм с жестким уравнением. Чтобы выполнить какой-то блок, нужно 
  обязательно начать выполнение алгоритма сначала, и нельзя воспользоваться уже 
  введенными сведениями о предыдущем пассажире для последующего.</p>
<p>Более гибким по управлению является алгоритм, управляемый событиями. События 
  – это некоторые сообщения типа “не вводить новую фамилию”, “не вводить новый 
  рейс” и т.д. Эти сообщения и управляют выполнением алгоритма, позволяя выбрать 
  в зависимости от события блок, который должен работать. Автоматизированная система 
  выдачи билетов может быть представлена ниже алгоритмом, управляемым событиями:</p>
<p align="center"><img src="img/2vRis5.GIF" width="599" height="355"></p>
<p align="center">&nbsp;</p>
<p>Здесь предусмотрен ввод событий, либо по окончанию работы каждого блока, либо 
  по желанию оператора. Эти события и управляют выполнением алгоритма. Например, 
  после окончания прочеса выдачи билета для одного лица оператор, не выходя из 
  алгоритма, может задать нужные сообщения и, минуя выполнение ненужных блоков, 
  продолжать работу.</p>
<p>Процесс разработки (конструирования) алгоритма начинается с анализа предметной 
  области и построения модели, которая позволит выделить операции, составляющие 
  алгоритм, и способ их выполнения. Операции алгоритма подразделяют на вычислительные 
  и управляющие. Вычислительные операции служат для обработки данных и получения 
  результата. Управляющие операции нужны для того, чтобы задавать последовательность 
  выполнения вычислительных операций.</p>
<p>Среди управляющих операций наиболее употребительными являются операции выбора 
  и операции цикла. Операции выбора служат для того, чтобы проверить некоторые 
  данные и, в зависимости от его значения, заставить выполняться тот или иной 
  вычислительный оператор. Оператор выбора (if) проверяет условие на “истину” 
  и “ложь” и передает управление одному из двух вычислительных операторов.</p>
<p>Последовательность из вычислительных операторов выполняется в том порядке, 
  в котором они указаны в записи алгоритма (последовательно).</p>
<p>Операции управления циклами позволяют многократное выполнение одних и тех же 
  операций. Различают циклы с известным и неизвестным числом повторений. Циклы 
  с известным числом повторений заставляют работать группу операций заданное число 
  раз. Циклы с неизвестным числом повторений определяют условие, и группа операций 
  работает до тех пор пока это условие истинно. </p>
<p>Контрольные вопросы.</p>
<ol>
  <li>Приведите схему разработки программного продукта при алгоритмическом стиле 
    программирования.</li>
  <li>Дайте понятие алгоритма</li>
  <li>Охарактеризуйте алгоритмы с жестким управлением и управлением событиями.</li>
  <li>Всегда ли существует алгоритм для решения задачи?</li>
  <li>Если алгоритм существует, всегда ли он реализуем на ЭВМ? <br>
  </li>
</ol>
<p>&nbsp;</p>
<P><br>
<font color="#481493" size="3" face="arial">
&copy, 2004, ХНУРЭ, каф. ПОЭВМ, Дюбко Г. Ф., все вопросы направлять по адресу: Valenda@ukr.net</font></p>
<p>&nbsp;</p>
</body>
</html>
